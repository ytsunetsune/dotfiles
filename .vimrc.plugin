" ------------------------------------------------------------------------------
" NeoBundleで管理しているプラグイン読み込み
" ------------------------------------------------------------------------------

" operator-replace : yankしたものでreplaceする
map R <Plug>(operator-replace)

" Gundo：Undo履歴を追える (need python support)
nnoremap <F3> :GundoToggle<CR>

" jedi-vim：python開発
let g:jedi#auto_initialization = 1
let g:jedi#popup_on_dot = 0
autocmd  FileType python let b:did_ftplugin = 1"

" vim-textobj-multiblock：カッコ系をまとめてib, abで扱う
omap ab <Plug>(textobj-multiblock-a)
omap ib <Plug>(textobj-multiblock-i)
vmap ab <Plug>(textobj-multiblock-a)
vmap ib <Plug>(textobj-multiblock-i)

" committia.vim：gitコミットログサポート
let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
  setlocal spell
  " if nocommit message, start with insert mode
  if a:info.vcs ==# 'git' && getline(1) ==# ''
    startinsert
  end
  " Scroll the diff window from insert mode
  " Map <C-n> and <C-p>
  imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
  imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
endfunction

" clang-format：clang-formatを使ってC系のコードを整形する
let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11",
            \ "BreakBeforeBraces" : "Stroustrup",
            \ }

" vim-easy-align：整形
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)

" vim-quickhl：キーワードをハイライトする
nmap <Space>m <Plug>(quickhl-manual-this)
xmap <Space>m <Plug>(quickhl-manual-this)
nmap <Space>M <Plug>(quickhl-manual-reset)
xmap <Space>M <Plug>(quickhl-manual-reset)

" diffchar.vim：単語単位でvimdiff
" vimdiffで起動した際自動的に単語単位の差分(diffchar.vim)を有効にする
if &diff
  augroup enable_diffchar
    autocmd!
    autocmd VimEnter * execute "%SDChar"
  augroup END
endif

" vimshell：vim内で使えるshell
let g:vimshell_prompt_expr =
      \ 'escape(fnamemodify(getcwd(), ":~")."$", "\\[]()?! ")." "'
let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+$ '
nnoremap <silent> ,is :VimShell<CR>
nnoremap <silent> ,ip :VimShellPop<CR>
nnoremap <silent> ,iel :VimShellInteractive jskrbeusgl<CR>
nnoremap <silent> ,ipy :VimShellInteractive python<CR>

" Unite.vim：統合UI
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files -start-insert file/async<CR>
nnoremap <silent> ,uF :<C-u>Unite neomru/file<CR>
nnoremap <silent> ,un :<C-u>Unite -start-insert file/new <CR>
nnoremap <silent> ,ud :<C-u>Unite directory<CR>
nnoremap <silent> ,uD :<C-u>Unite neomru/directory <CR>
nnoremap <silent> ,uo :<C-u>Unite outline<CR>
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
nnoremap <silent> ,uu :<C-u>Unite buffer neomru/file<CR>
nnoremap <silent> ,uU :<C-u>UniteWithBufferDir -buffer-name=files buffer neomru/file file<CR>
nnoremap <silent> ,um :<C-u>Unite mark<CR>
nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>
nnoremap <silent> ,ut :<C-u>Unite tweetvim<CR>
nnoremap <silent> ,uj :<C-u>Unite -start-insert junkfile -no-quit<CR>

augroup unite_openclose
  autocmd!
  " ウィンドウを分割して開く
  au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
  au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
  " ウィンドウを縦に分割して開く
  au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
  au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
  " ESCキーを2回押すと終了する
  au FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
  au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q
augroup END

" vim-slime：vim上のテキストをscreen/tmuxセッションに送る
let g:slime_target = "tmux"
let g:slime_paste_file = "$HOME/.slime_paste"
vmap <silent> <C-c><C-c> :SlimeSend<CR>
nnoremap <silent> <C-c><C-c> <S-v>:SlimeSend<CR>

" TweetVim
let g:tweetvim_display_icon = 1
let g:tweetvim_tweet_per_page = 60
nnoremap <silent> ,S :<C-u>TweetVimSay<CR>

" vim-anzu：検索結果の個数表示
"nmap n <Plug>(anzu-n-with-echo)
"nmap N <Plug>(anzu-N-with-echo)
nmap <Esc><Esc> <Plug>(anzu-clear-search-status)
set statusline=%{anzu#search_status()}

" incsearch.vim：検索を便利に
let g:incsearch#auto_nohlsearch = 1
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n <Plug>(incsearch-nohl-n)
map N <Plug>(incsearch-nohl-N)
nmap n <Plug>(incsearch-nohl)<Plug>(anzu-n-with-echo)
nmap N <Plug>(incsearch-nohl)<Plug>(anzu-N-with-echo)
nmap * <Plug>(incsearch-nohl-*)<Plug>(anzu-star-with-echo)
nmap # <Plug>(incsearch-nohl-#)<Plug>(anzu-sharp-with-echo)
nmap g* <Plug>(incsearch-nohl-g*)<Plug>(anzu-star-with-echo)
nmap g# <Plug>(incsearch-nohl-g#)<Plug>(anzu-sharp-with-echo)

" vim-asterisk：*検索を便利に
map *  <Plug>(incsearch-nohl0)<Plug>(asterisk-z*)
map g* <Plug>(incsearch-nohl0)<Plug>(asterisk-gz*)
map #  <Plug>(incsearch-nohl0)<Plug>(asterisk-z#)
map g# <Plug>(incsearch-nohl0)<Plug>(asterisk-gz#)

" previm：markdownなどのプレビュー
let g:previm_enable_realtime = 1
augroup PrevimSettings
  autocmd!
  autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} setf markdown
augroup END

" vim-migemo：migemo
nnoremap // :Migemo<CR>

" junkfile.vim：使い捨てのファイルを作る
let g:junkfile#directory="~/junk"
nnoremap <silent> ,jk :JunkfileOpen<CR>

" clever-f：f検索を便利に
let g:clever_f_smart_case=1
let g:clever_f_use_migemo=1
